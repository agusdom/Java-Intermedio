/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ventanas;

import java.awt.*;
import javax.swing.*;
import clases.Conexion;
import java.sql.*;

/**
 *
 * @author agust
 */
public class GraficarEstatus extends javax.swing.JFrame {

    String User;
    int NuevoIngreso, NoReparado, EnRevision, Reparado, Entregado;

    String[] Vector_Estatus_Nombre = new String[5];
    int[] Vector_Estatus_Cantidad = new int[5];

    /**
     * Creates new form GraficarEstatus
     */
    public GraficarEstatus() {
        initComponents();
        User = Login.User;
        setSize(550, 450);
        setResizable(false);
        setTitle("Técnico - Sesión de " + User);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        ImageIcon wallpaper = new ImageIcon("src/images/wallpaperPrincipal.jpg");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(jLabel_Wallpaper.getWidth(), jLabel_Wallpaper.getHeight(), Image.SCALE_DEFAULT));
        jLabel_Wallpaper.setIcon(icono);
        this.repaint();

        try {
            Connection cn = Conexion.Conectar();
            PreparedStatement pst = cn.prepareStatement(
                    "select Estatus, count(Estatus) as Cantidad from equipos group by Estatus");
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                int Position = 0;
                do {
                    Vector_Estatus_Nombre[Position] = rs.getString(1);
                    Vector_Estatus_Cantidad[Position] = rs.getInt(2);

                    if (Vector_Estatus_Nombre[Position].equalsIgnoreCase("En Revision")) {
                        EnRevision = Vector_Estatus_Cantidad[Position];
                    } else if (Vector_Estatus_Nombre[Position].equalsIgnoreCase("Entregado")) {
                        Entregado = Vector_Estatus_Cantidad[Position];
                    } else if (Vector_Estatus_Nombre[Position].equalsIgnoreCase("No Reparado")) {
                        NoReparado = Vector_Estatus_Cantidad[Position];
                    } else if (Vector_Estatus_Nombre[Position].equalsIgnoreCase("Nuevo Ingreso")) {
                        NuevoIngreso = Vector_Estatus_Cantidad[Position];
                    } else if (Vector_Estatus_Nombre[Position].equalsIgnoreCase("Reparado")) {
                        Reparado = Vector_Estatus_Cantidad[Position];
                    }

                    Position++;

                } while (rs.next());
            }
        } catch (SQLException e) {
            System.err.println("Error al conectar con la Base de datos.");
            JOptionPane.showMessageDialog(null, "¡¡Error!!,contacte al administrador.");
        }

        repaint();
    }

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("images/icon.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel_Wallpaper = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Gráfica de Estatus");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));
        getContentPane().add(jLabel_Wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 550, 450));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraficarEstatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraficarEstatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraficarEstatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraficarEstatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraficarEstatus().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_Wallpaper;
    // End of variables declaration//GEN-END:variables
  public int EstatusMasRepetido(int NuevoIngreso, int NoReparado, int EnRevision, int Reparado, int Entregado) {
        if (NuevoIngreso > NoReparado && NuevoIngreso > EnRevision && NuevoIngreso > Reparado && NuevoIngreso > Entregado) {
            return NuevoIngreso;
        } else if (NoReparado > EnRevision && NoReparado > Reparado && NoReparado > Entregado) {
            return NoReparado;
        } else if (EnRevision > Reparado && EnRevision > Entregado) {
            return EnRevision;
        } else if (Reparado > Entregado) {
            return Reparado;
        } else {
            return Entregado;
        }

    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        int Estatus_Mas_Repetido = EstatusMasRepetido(NuevoIngreso, NoReparado, EnRevision, Reparado, Entregado);

        int Largo_NuevoIngreso = NuevoIngreso * 400 / Estatus_Mas_Repetido;
        int Largo_NoReparado = NoReparado * 400 / Estatus_Mas_Repetido;
        int Largo_EnRevision = EnRevision * 400 / Estatus_Mas_Repetido;
        int Largo_Reparado = Reparado * 400 / Estatus_Mas_Repetido;
        int Largo_Entregado = Entregado * 400 / Estatus_Mas_Repetido;

        g.setColor(new Color(240, 248, 0));//Amarillo
        g.fillRect(100, 100, Largo_NuevoIngreso, 40);
        g.drawString("Nuevo Ingreso", 10, 118);
        g.drawString("Cantidad:" + NuevoIngreso, 10, 133);

        g.setColor(new Color(255, 0, 0));//Rojo
        g.fillRect(100, 150, Largo_NoReparado, 40);
        g.drawString("No Reparado", 10, 168);
        g.drawString("Cantidad:" + NoReparado, 10, 183);

        g.setColor(new Color(0, 0, 0));//Negro
        g.fillRect(100, 200, Largo_EnRevision, 40);
        g.drawString("En Revision", 10, 218);
        g.drawString("Cantidad:" + EnRevision, 10, 233);

        g.setColor(new Color(255, 255, 255));//Blanco
        g.fillRect(100, 250, Largo_Reparado, 40);
        g.drawString("Reparado", 10, 268);
        g.drawString("Cantidad:" + Reparado, 10, 283);

        g.setColor(new Color(0, 85, 0));//Verde
        g.fillRect(100, 300, Largo_Entregado, 40);
        g.drawString("Entregado", 10, 318);
        g.drawString("Cantidad:" + Entregado, 10, 333);

    }
}
